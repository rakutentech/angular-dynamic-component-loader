{"version":3,"sources":["../../../../projects/angular-dynamic-component-loader/src/lib/angular-dynamic-component-loader.service.ts"],"names":["DynamicComponentLoaderService","componentFactoryResolver","appRef","injector","this","prototype","loadComponent","component","data","shouldAttachView","newComponentRef","resolveComponentFactory","create","Object","assign","instance","attachView","hostView","i0","ɵɵinject","ComponentFactoryResolver","ApplicationRef","Injector","factory","ɵfac","providedIn"],"mappings":"+YAME,SAAAA,EAAoBC,EAA4DC,EAAgCC,GAA5FC,KAAAH,yBAAAA,EAA4DG,KAAAF,OAAAA,EAAgCE,KAAAD,SAAAA,SAYhHH,EAAAK,UAAAC,cAAA,SAAiBC,EAAoBC,EAAeC,EAAkCN,QAAjD,IAAAK,IAAAA,EAAA,SAAe,IAAAC,IAAAA,GAAA,GAClD,IACMC,EADmBN,KAAKH,yBAAyBU,wBAAwBJ,GACtCK,OAAOT,GAAYC,KAAKD,UAQjE,OANAU,OAAOC,OAAOJ,EAAgBK,SAAUP,GAEpCC,GACFL,KAAKF,OAAOc,WAAWN,EAAgBO,UAGlCP,yCAvBEV,GAA6BkB,EAAAC,SAAAD,EAAAE,0BAAAF,EAAAC,SAAAD,EAAAG,gBAAAH,EAAAC,SAAAD,EAAAI,gDAA7BtB,EAA6BuB,QAA7BvB,EAA6BwB,KAAAC,WAF5B","sourcesContent":["import {ApplicationRef, ComponentFactoryResolver, ComponentRef, Injectable, Injector, Type} from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DynamicComponentLoaderService {\n  constructor(private componentFactoryResolver: ComponentFactoryResolver, private appRef: ApplicationRef, private injector: Injector) {\n  }\n\n  /**\n   * Loads a dynamic Angular component instance of given type T\n   *\n   * @param component - The class name of the dynamically loaded component\n   * @param [data] - Data of the dynamic component\n   * @param [shouldAttachView] - If true, the component's view will be attached to a viewContainer\n   * @param [injector] - This provides local injections to a dynamic component instance\n   * @returns A new ComponentRef instance\n   */\n  loadComponent<T>(component: Type<T>, data: {} = {}, shouldAttachView: boolean = true, injector?: Injector): ComponentRef<T> {\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\n    const newComponentRef = componentFactory.create(injector || this.injector);\n\n    Object.assign(newComponentRef.instance, data);\n\n    if (shouldAttachView) {\n      this.appRef.attachView(newComponentRef.hostView);\n    }\n\n    return newComponentRef;\n  }\n}\n"]}